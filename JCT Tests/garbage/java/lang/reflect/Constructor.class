package java.lang.reflect;
final public class Constructor
extends java.lang.reflect.AccessibleObject
implements java.lang.reflect.GenericDeclaration, java.lang.reflect.Member
{
private java.lang.Object clazz;

private java.lang.Object slot;

private java.lang.Object parameterTypes;

private java.lang.Object exceptionTypes;

private java.lang.Object modifiers;

private transient java.lang.Object signature;

private transient java.lang.Object genericInfo;

private java.lang.Object annotations;

private java.lang.Object parameterAnnotations;

private volatile java.lang.Object constructorAccessor;

private java.lang.Object root;

private transient java.lang.Object declaredAnnotations;

private sun.reflect.generics.factory.GenericsFactory getFactory()
{

}

private sun.reflect.generics.repository.ConstructorRepository getGenericInfo()
{

}

void <init>(java.lang.Object arg0, java.lang.Object arg1, java.lang.Object arg2, java.lang.Object arg3, java.lang.Object arg4, java.lang.Object arg5, java.lang.Object arg6, java.lang.Object arg7)
{

}

java.lang.reflect.Constructor copy()
{

}

public java.lang.Class getDeclaringClass()
{

}

public java.lang.String getName()
{

}

public int getModifiers()
{

}

public java.lang.reflect.TypeVariable[] getTypeParameters()
{

}

public java.lang.Class[] getParameterTypes()
{

}

public java.lang.reflect.Type[] getGenericParameterTypes()
{

}

public java.lang.Class[] getExceptionTypes()
{

}

public java.lang.reflect.Type[] getGenericExceptionTypes()
{

}

public boolean equals(java.lang.Object arg0)
{

}

public int hashCode()
{

}

public java.lang.String toString()
{

}

public java.lang.String toGenericString()
{

}

public java.lang.Object newInstance(java.lang.Object arg0) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException, java.lang.InstantiationException, java.lang.reflect.InvocationTargetException
{

}

public boolean isVarArgs()
{

}

public boolean isSynthetic()
{

}

private sun.reflect.ConstructorAccessor acquireConstructorAccessor()
{

}

sun.reflect.ConstructorAccessor getConstructorAccessor()
{

}

void setConstructorAccessor(java.lang.Object arg0)
{

}

int getSlot()
{

}

java.lang.String getSignature()
{

}

byte[] getRawAnnotations()
{

}

byte[] getRawParameterAnnotations()
{

}

public java.lang.annotation.Annotation getAnnotation(java.lang.Object arg0)
{

}

public java.lang.annotation.Annotation[] getDeclaredAnnotations()
{

}

private synchronized java.util.Map declaredAnnotations()
{

}

public java.lang.annotation.Annotation[][] getParameterAnnotations()
{

}


}
